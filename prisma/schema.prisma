// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  locale        String    @default("en")
  theme         Theme     @default(SYSTEM)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  createdRooms  StudyRoom[]     @relation("RoomCreator")
  roomMembers   RoomMember[]
  messages      Message[]
  studySessions StudySession[]
  noteEdits     NoteEdit[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudyRoom {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  isPublic    Boolean  @default(true)
  maxMembers  Int      @default(10)
  password    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String @db.ObjectId
  creator   User   @relation("RoomCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  members       RoomMember[]
  messages      Message[]
  notes         Note[]
  studySessions StudySession[]
}

model RoomMember {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  role     RoomRole         @default(MEMBER)
  status   MemberStatus     @default(OFFLINE)
  joinedAt DateTime         @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  roomId String    @db.ObjectId
  room   StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Message {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      MessageType @default(TEXT)
  createdAt DateTime    @default(now())

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  roomId String    @db.ObjectId
  room   StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomId String    @db.ObjectId
  room   StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  edits NoteEdit[]
}

model NoteEdit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  operation String   // JSON string of the operation
  createdAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  noteId String @db.ObjectId
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model StudySession {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  duration  Int           // in seconds
  type      SessionType   @default(POMODORO)
  status    SessionStatus @default(ACTIVE)
  startedAt DateTime      @default(now())
  endedAt   DateTime?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  roomId String    @db.ObjectId
  room   StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum RoomRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum MemberStatus {
  ONLINE
  OFFLINE
  STUDYING
  BREAK
}

enum MessageType {
  TEXT
  SYSTEM
  FILE
}

enum SessionType {
  POMODORO
  CUSTOM
  BREAK
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}